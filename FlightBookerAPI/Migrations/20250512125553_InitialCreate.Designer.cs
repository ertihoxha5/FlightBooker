// <auto-generated />
using System;
using FlightBookerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBookerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250512125553_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightBookerAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Departamenti")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Niveli_i_Aksesit")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminID = 1,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 781, DateTimeKind.Utc).AddTicks(3780),
                            Departamenti = "IT",
                            Niveli_i_Aksesit = 2,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TicketID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("UserID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Email", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "EmailAddress");

                    b.ToTable("Email");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            EmailAddress = "superadmin@flightbooker.com",
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 529, DateTimeKind.Utc).AddTicks(5463),
                            IsPrimary = true
                        },
                        new
                        {
                            UserID = 2,
                            EmailAddress = "admin@flightbooker.com",
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 529, DateTimeKind.Utc).AddTicks(5465),
                            IsPrimary = true
                        });
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Komenti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte?>("Vleresimi")
                        .HasColumnType("tinyint");

                    b.HasKey("FeedbackID");

                    b.HasIndex("UserID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Klienti", b =>
                {
                    b.Property<int>("KlientiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KlientiID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("KlientiID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Klienti");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Login", b =>
                {
                    b.Property<int>("LoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Login");

                    b.HasData(
                        new
                        {
                            LoginID = 1,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 653, DateTimeKind.Utc).AddTicks(1907),
                            Email = "superadmin@flightbooker.com",
                            Password = "$2a$11$uxf4tqFIyt0liEByhWJ0PO.BGJL3f48NL9YvFKaiqykvvLt4RgECG",
                            Role = "SuperAdmin",
                            UserID = 1,
                            Username = "superadmin"
                        },
                        new
                        {
                            LoginID = 2,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 781, DateTimeKind.Utc).AddTicks(1962),
                            Email = "admin@flightbooker.com",
                            Password = "$2a$11$l.M1HnwR/fRBn996IeVpl.W2ze.mV.nxc2U0osGv3bJjnOP4Dog.m",
                            Role = "Admin",
                            UserID = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Messages", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("BankTransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.SuperAdmini", b =>
                {
                    b.Property<int>("SuperAdminiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuperAdminiID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SuperAdminiID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("SuperAdmini");

                    b.HasData(
                        new
                        {
                            SuperAdminiID = 1,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 781, DateTimeKind.Utc).AddTicks(3703),
                            UserID = 1
                        });
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Telefoni", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "PhoneNumber");

                    b.ToTable("Telefoni");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLindjes")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gjinia")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Mbiemri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Qyteti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rruga")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Shteti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 529, DateTimeKind.Utc).AddTicks(5311),
                            Emri = "Super",
                            Mbiemri = "Admin",
                            Verified = true
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2025, 5, 12, 12, 55, 52, 529, DateTimeKind.Utc).AddTicks(5315),
                            Emri = "Admin",
                            Mbiemri = "Flight",
                            Verified = true
                        });
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Admin", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("FlightBookerAPI.Models.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Booking", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Email", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Feedback", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Klienti", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithOne("Klienti")
                        .HasForeignKey("FlightBookerAPI.Models.Klienti", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Login", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithOne("Login")
                        .HasForeignKey("FlightBookerAPI.Models.Login", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Messages", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Notification", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Payment", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.SuperAdmini", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithOne("SuperAdmini")
                        .HasForeignKey("FlightBookerAPI.Models.SuperAdmini", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.Telefoni", b =>
                {
                    b.HasOne("FlightBookerAPI.Models.User", "User")
                        .WithMany("Telefonat")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBookerAPI.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Bookings");

                    b.Navigation("Emails");

                    b.Navigation("Feedbacks");

                    b.Navigation("Klienti");

                    b.Navigation("Login");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("SuperAdmini");

                    b.Navigation("Telefonat");
                });
#pragma warning restore 612, 618
        }
    }
}
